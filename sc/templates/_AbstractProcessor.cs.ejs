namespace <%= namespace %>
{
    public abstract class <%= name %>
    {
        public void Process(<%= argumentsClassName %> args)
        {
            if (args.Aborted)
            {
                return;
            }

            if (!this.SafeCondition(args))
            {
                return;
            }

            this.SafeExecute(args);
        }

        public override async void SafeExecute(<%= argumentsClassName %> args)
        {
            await this.SafeProcessorExecute(args);
        }

        public abstract void SafeProcessorExecute(<%= argumentsClassName %> args);

        public override bool SafeCondition(<%= argumentsClassName %> args)
        {
            return this.SafeProcessorCondition(args);
        }

        public virtual bool SafeProcessorCondition(<%= argumentsClassName %> args)
        {
            return true;
        }
    }
}
