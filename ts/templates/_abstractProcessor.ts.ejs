import { <%= argumentsClassName %> } from "<%= argumentsFileName %>";

export abstract class <%= name %> {
    public async SafeExecute(args: <%= argumentsClassName %>): Promise<void> {
        await this.SafeProcessorExecute(args);
    }

    public abstract SafeProcessorExecute(args: <%= argumentsClassName %>): Promise<void>;

    public SafeCondition(args: <%= argumentsClassName %>): boolean {
        return this.SafeProcessorCondition(args);
    }
    
    public SafeProcessorCondition(args: <%= argumentsClassName %>): boolean {
        return true;
    }

    public Execute(args: <%= argumentsClassName %>): Promise<void> {
        return this.Process(args);
    }
    
    public async Process(args: <%= argumentsClassName %>): Promise<void> {
        if (args.IsAborted) {
            return;
        }

        if (!this.SafeCondition(args)) {
            return;
        }

        await this.SafeExecute(args);
    }
}
